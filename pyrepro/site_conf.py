import json
from pathlib import Path


class NginxConf:
    config = {
        "listen": [],
        "locations": [],
    }

    def __init__(self, filename: Path):
        if filename.suffix != ".conf":
            raise Exception("Invalid file extension")

        if filename.exists() and filename.is_dir():
            raise Exception("Invalid file")

        self.filename = filename

    ## CORE FUNCTIONS

    def save(self, filename: Path = None):
        if filename is None:
            filename = self.filename.parent / (self.filename.stem + ".json")
        filename.write_text(json.dumps(self.config, indent=4))

    def load(self, filename: Path = None):
        if filename is None:
            filename = self.filename.parent / (self.filename.stem + ".json")
        self.config = json.loads(filename.read_text())

    def gen_listen(self) -> str:
        conf_text = ""

        if "listen" in self.config:
            conf_text += "\n\t# Listen\n"

        for listen in self.config["listen"]:
            conf_text += "\tlisten "

            if listen["ipv6"]:
                conf_text += "[::]:"

            conf_text += str(listen["port"])

            if listen["ssl"]:
                conf_text += " ssl"

            if listen["default_server"]:
                conf_text += " default_server"

            conf_text += ";\n"

        return conf_text

    def gen_server_name(self) -> str:
        conf_text = ""

        if "server_name" not in self.config or not self.config["server_name"]:
            conf_text += "\n\t# Server Name\n"
            conf_text += "\tserver_name _;\n"
        else:
            conf_text += "\n\t# Server Name\n"
            conf_text += "\tserver_name " + " ".join(self.config["server_name"]) + ";\n"

        return conf_text

    def gen_logs(self) -> str:
        conf_text = ""

        if "logs" in self.config:
            conf_text += "\n\t# Logs\n"
            if "access" in self.config["logs"] and self.config["logs"]["access"]:
                conf_text += "\taccess_log " + self.config["logs"]["access"] + ";\n"
            if "error" in self.config["logs"] and self.config["logs"]["error"]:
                conf_text += "\terror_log " + self.config["logs"]["error"] + ";\n"

        return conf_text

    def gen_locations(self) -> str:
        conf_text = ""

        if "locations" in self.config:
            conf_text += "\n\t# Locations\n"

        for location in self.config["locations"]:
            conf_text += "\tlocation " + location["path"] + " {\n"

            if "root" in location and location["root"]:
                conf_text += "\t\troot " + location["root"] + ";\n"

            if "index" in location and location["index"]:
                conf_text += "\t\tindex " + " ".join(location["index"]) + ";\n"

            conf_text += "\t\ttry_files $uri $uri/ =404;\n"

            if "proxy_pass" in location and location["proxy_pass"]:
                conf_text += "\t\tproxy_pass " + location["proxy_pass"] + ";\n"
            conf_text += "\t}\n"

        return conf_text

    def gen_ssl(self) -> str:
        conf_text = ""

        if "ssl" in self.config:
            conf_text += "\n\t# SSL\n"
            conf_text += "\tssl_certificate " + self.config["ssl"]["cert"] + ";\n"
            conf_text += "\tssl_certificate_key " + self.config["ssl"]["key"] + ";\n"

        return conf_text

    def generate(self) -> str:
        conf_text = "server {\n"
        conf_text += "\t# This file is generated by PyRePro\n"
        conf_text += "\t# Please do not modify this file directly. It is automatically generated.\n"

        # listen ----
        conf_text += self.gen_listen()

        # server_name ----
        conf_text += self.gen_server_name()

        # logs ----
        conf_text += self.gen_logs()

        # locations ----
        conf_text += self.gen_locations()

        # ssl ----
        conf_text += self.gen_ssl()

        # optionnal text ----
        if "optionnal" in self.config:
            conf_text += "\n\t# Optionnal\n"
            conf_text += self.config["optionnal"]
            conf_text += "\n\n"

        conf_text += "}"

        return conf_text

    def write(self):
        self.filename.write_text(self.generate())

    ## ADDITIONAL FUNCTIONS

    def add_listen(self, port: int, default_server: bool = False, ipv6: bool = False, ssl: bool = False):
        self.config["listen"].append({
            "port": port,
            "default_server": default_server,
            "ipv6": ipv6,
            "ssl": ssl,
        })

    def remove_listen(self, port: int, default_server: bool = False, ipv6: bool = False, ssl: bool = False):
        self.config["listen"].remove({
            "port": port,
            "default_server": default_server,
            "ipv6": ipv6,
            "ssl": ssl,
        })

    def add_location(self, path: str, root: str = None, index: list = None, proxy_pass: str = None):
        self.config["locations"].append({
            "path": path,
            "root": root,
            "index": index,
            "proxy_pass": proxy_pass,
        })

    def remove_location(self, path: str):
        for location in self.config["locations"]:
            if location["path"] == path:
                self.config["locations"].remove(location)
                break

    def add_server_name(self, server_name: str):
        if "server_name" not in self.config:
            self.config["server_name"] = []
        self.config["server_name"].append(server_name)

    def remove_server_name(self, server_name: str):
        self.config["server_name"].remove(server_name)

    def add_ssl(self, cert: str, key: str):
        self.config["ssl"] = {
            "cert": cert,
            "key": key,
        }

    def remove_ssl(self):
        del self.config["ssl"]

    def add_logs(self, access: str, error: str):
        self.config["logs"] = {
            "access": access,
            "error": error,
        }

    def remove_logs(self):
        del self.config["logs"]
